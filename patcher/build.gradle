apply plugin: "net.minecraftforge.gradle.patcher"

minecraft {
    version = "1.8"
    //mappings = 'stable_16'
    mappings = "snapshot_nodoc_20141130"
    workspaceDir = "projects"
    versionJson = "forge/fml/jsons/1.8-dev.json"
    buildUserdev = true
    buildInstaller = true
    installerVersion = "1.4"

    def common = {
        patchPrefixOriginal "../src-base/minecraft"
        patchPrefixChanged "../src-work/minecraft"
        mainClassClient "net.minecraft.launchwrapper.Launch"
        tweakClassClient "net.minecraftforge.fml.common.launcher.FMLTweaker"
        mainClassServer "net.minecraft.launchwrapper.Launch"
        tweakClassServer "net.minecraftforge.fml.common.launcher.FMLServerTweaker"
    }

    projects {
        fml {
            rootDir 'forge/fml'
            patchDir "forge/fml/patches/minecraft"
            patchAfter "clean"
            genPatchesFrom "clean"

            with common
        }
        forge {
            rootDir "forge"
            patchDir "forge/patches/minecraft"
            patchAfter "fml"
            genPatchesFrom "fml"

            with common
        }
    }
}

version = getVersionFromJava(file("forge/src/main/java/net/minecraftforge/common/ForgeVersion.java"))

extractFmlSources { exclude "**/SideOnly.java", "**/Side.java" }

genGradleProjects { addTestCompileDep "junit:junit:4.12" }

processJson {
    releaseJson = "forge/fml/jsons/1.8-rel.json"
    addReplacements([
        "@minecraft_version@": project.minecraft.version,
        "@version@": project.version,
        "@project@": "forge",
        "@artifact@": "net.minecraftforge:forge:${minecraft.version.replace('-', '_')}-${project.version}",
        "@universal_jar@": { outputJar.archiveName },
        "@timestamp@": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
    ])
}

def extraTxts = [
    "forge/fml/LICENSE-fml.txt",
    "forge/fml/CREDITS-fml.txt",
    "forge/MinecraftForge-Credits.txt",
    "forge/MinecraftForge-License.txt",
    "forge/Paulscode SoundSystem CodecIBXM License.txt",
    "forge/Paulscode IBXM Library License.txt"
]

outputJar {
    classifier = 'universal'
    from extraTxts

    manifest.attributes([
        "Main-Class": "net.minecraftforge.fml.relauncher.ServerLaunchWrapper",
        "TweakClass": "net.minecraftforge.fml.common.launcher.FMLTweaker",
        "Class-Path": getServerClasspath(file("forge/fml/jsons/1.8-rel.json"))
    ])
}

installer {
    classifier = 'installer'
    from extraTxts
    from "src/main/resources/forge_logo.png"
    rename "forge_logo\\.png", "big_logo.png"
}

task signUniversal(type: SignJar, dependsOn: 'outputJar') {
    onlyIf {
        project.hasProperty('jarsigner')
    }

    def jarsigner = [:];

    if (project.hasProperty('jarsigner'))
        jarsigner = project.jarsigner;

    alias = 'forge'
    exclude "paulscode/**"
    storePass = jarsigner.storepass
    keyPass = jarsigner.keypass
    keyStore = jarsigner.keystore
    inputFile = outputJar.archivePath
    outputFile = outputJar.archivePath
}


// HELPER METHODS

import groovy.json.JsonSlurper;

String getServerClasspath(File file)
{
    def node = new JsonSlurper().parse(file);
    def out = new StringBuilder()
    node.versionInfo.libraries.each { lib ->
        if (lib.serverreq)
        {
            // group : artifact : version
            def split = lib.name.split(':')
            def group = split[0].replace('.', '/')
            def artifact = split[1]
            def version = split[2]
            out += "libraries/$group/$artifact/$version/$artifact-${version}.jar "
        }
    }
    out += "minecraft_server.${minecraft.version}.jar"

    return out.toString();
}

String getVersionFromJava(File file)
{
    String major = "0";
    String minor = "0";
    String revision = "0";
    String build = "0";

    String prefix = "public static final int";
    file.eachLine{ String s ->
        s = s.trim();
        if (s.startsWith(prefix))
        {
            s = s.substring(prefix.length(), s.length() - 1);
            s = s.replace('=', ' ').replace("Version", "").replaceAll(" +", " ").trim();
            String[] pts = s.split(" ");

            if (pts[0].equals("major")) major = pts[pts.length - 1];
            else if (pts[0] == "minor") minor = pts[pts.length - 1];
            else if (pts[0] == "revision") revision = pts[pts.length - 1];
        }
    }

    if (System.getenv().containsKey("BUILD_NUMBER"))
    {
        build = System.getenv("BUILD_NUMBER");
    }

    String branch = null;
    if (!System.getenv().containsKey("GIT_BRANCH"))
    {
        // TODO: use grgit
        branch = "git rev-parse --abbrev-ref HEAD".execute().text.trim()
    }
    else
    {
        branch = System.getenv("GIT_BRANCH");
        branch = branch.substring(branch.lastIndexOf('/') + 1);
    }

    def out = "${minecraft.version.replace('-', '_')}-$major.$minor.$revision.$build"

    if (branch && branch != 'master' && branch != 'HEAD')
        out += "-$branch"

    return out;
}
